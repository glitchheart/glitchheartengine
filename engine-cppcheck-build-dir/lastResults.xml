<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.82"/>
    <errors>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;EnginePath&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;EnginePath&amp;#039; is assigned a value that is never used." sinceDate="18-03-2018">
            <location file="glitch_tool\build_main.cpp" line="33"/>
        </error>
        <error id="deallocDealloc" severity="error" msg="Deallocating a deallocated pointer: File" verbose="Deallocating a deallocated pointer: File" sinceDate="18-03-2018">
            <location file="glitch_tool\project_main.cpp" line="317"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="glitch_tool\project_main.cpp" line="291"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="glitch_tool\project_main.cpp" line="304"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="glitch_tool\project_main.cpp" line="329"/>
        </error>
        <error id="purgedConfiguration" severity="information" msg="The configuration &amp;#039;__linux&amp;#039; was not checked because its code equals another one." verbose="The configuration &amp;#039;__linux&amp;#039; was not checked because its code equals another one." sinceDate="18-03-2018">
            <location file="glitch_tool\project_main.cpp" line="0"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;exts_i&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;exts_i&amp;#039; nulled but not freed upon failure" sinceDate="18-03-2018">
            <location file="libs\glad\src\glad.c" line="743"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;result==NULL&amp;#039; is always true" verbose="Condition &amp;#039;result==NULL&amp;#039; is always true" sinceDate="18-03-2018">
            <location file="libs\glad\src\glad.c" line="696" info="Condition &amp;#039;result==NULL&amp;#039; is always true"/>
            <location file="libs\glad\src\glad.c" line="688" info="Assignment &amp;#039;result=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;exts_i&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;exts_i&amp;#039; nulled but not freed upon failure" sinceDate="18-03-2018">
            <location file="libs\glad_old\src\glad.c" line="160"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;result==NULL&amp;#039; is always true" verbose="Condition &amp;#039;result==NULL&amp;#039; is always true" sinceDate="18-03-2018">
            <location file="libs\glad_old\src\glad.c" line="113" info="Condition &amp;#039;result==NULL&amp;#039; is always true"/>
            <location file="libs\glad_old\src\glad.c" line="105" info="Assignment &amp;#039;result=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;gladLoadGL&amp;#039; is never used." verbose="The function &amp;#039;gladLoadGL&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="libs\glad_old\src\glad.c" line="124"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." verbose="%d in format string (no. 3) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." sinceDate="18-03-2018">
            <location file="src\log.h" line="23"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\log.h" line="30"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\log.h" line="38"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." sinceDate="18-03-2018">
            <location file="src\shared.h" line="58"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." sinceDate="18-03-2018">
            <location file="src\shared.h" line="81"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." verbose="%d in format string (no. 3) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." sinceDate="18-03-2018">
            <location file="src\shared.h" line="81"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 4) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." verbose="%d in format string (no. 4) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." sinceDate="18-03-2018">
            <location file="src\shared.h" line="81"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." verbose="%d in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." sinceDate="18-03-2018">
            <location file="src\shared.h" line="122"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1056"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." verbose="%d in format string (no. 2) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1056"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." verbose="%d in format string (no. 3) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1056"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 4) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." verbose="%d in format string (no. 4) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1056"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;i32&amp;#039;." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1810"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="60"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1622"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1941"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="2049"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="2127"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="442"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="484"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="908"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="916"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1292"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1491"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1785"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1807"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1896"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1911"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1929"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1939"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="2047"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="2125"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="2249"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;RenderCircle&amp;#039; is never used." verbose="The function &amp;#039;RenderCircle&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1275"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SetBoolUniform&amp;#039; is never used." verbose="The function &amp;#039;SetBoolUniform&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1134"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SetFloatArrayUniform&amp;#039; is never used." verbose="The function &amp;#039;SetFloatArrayUniform&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1164"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SetVec4ArrayUniform&amp;#039; is never used." verbose="The function &amp;#039;SetVec4ArrayUniform&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.cpp" line="1159"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int *&amp;#039; but the argument type is &amp;#039;i32 *&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int *&amp;#039; but the argument type is &amp;#039;i32 *&amp;#039;." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="216"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int *&amp;#039; but the argument type is &amp;#039;i32 *&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int *&amp;#039; but the argument type is &amp;#039;i32 *&amp;#039;." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="220"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int *&amp;#039; but the argument type is &amp;#039;i32 *&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int *&amp;#039; but the argument type is &amp;#039;i32 *&amp;#039;." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="224"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int *&amp;#039; but the argument type is &amp;#039;i32 *&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int *&amp;#039; but the argument type is &amp;#039;i32 *&amp;#039;." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="228"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int *&amp;#039; but the argument type is &amp;#039;b32 *&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int *&amp;#039; but the argument type is &amp;#039;b32 *&amp;#039;." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="244"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int *&amp;#039; but the argument type is &amp;#039;b32 *&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int *&amp;#039; but the argument type is &amp;#039;b32 *&amp;#039;." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="260"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="280"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="298"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="316"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;DebugArena&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;DebugArena&amp;#039; is assigned a value that is never used." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="296"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="sscanf() without field width limits can crash with huge input data." verbose="sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" sinceDate="18-03-2018">
            <location file="src\main.cpp" line="198"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="sscanf() without field width limits can crash with huge input data." verbose="sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" sinceDate="18-03-2018">
            <location file="src\main.cpp" line="203"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="111"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="124"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="136"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="172"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\main.cpp" line="406"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\engine_memory.h" line="54"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\engine_memory.h" line="274"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\engine_memory.h" line="162"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\engine_memory.h" line="174"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\engine_memory.h" line="214"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\engine_memory.h" line="227"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\engine_memory.h" line="239"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\engine_memory.h" line="251"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\gmap.h" line="183"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\gmap.h" line="183"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\rendering.h" line="453"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\rendering.h" line="453"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\gmap.cpp" line="98"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\gmap.cpp" line="40"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;HashString&amp;#039; is never used." verbose="The function &amp;#039;HashString&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\gmap.cpp" line="5"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SFold&amp;#039; is never used." verbose="The function &amp;#039;SFold&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\gmap.cpp" line="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\fmod_sound.cpp" line="119"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\fmod_sound.cpp" line="22"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\fmod_sound.cpp" line="117"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ChannelControlCallback&amp;#039; is never used." verbose="The function &amp;#039;ChannelControlCallback&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\fmod_sound.cpp" line="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\vulkan_rendering.cpp" line="356"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\vulkan_rendering.cpp" line="35"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\vulkan_rendering.cpp" line="39"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\vulkan_rendering.cpp" line="64"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\vulkan_rendering.cpp" line="68"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\vulkan_rendering.cpp" line="103"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\vulkan_rendering.cpp" line="161"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\vulkan_rendering.cpp" line="177"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\vulkan_rendering.cpp" line="217"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\vulkan_rendering.cpp" line="219"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\vulkan_rendering.cpp" line="222"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\vulkan_rendering.cpp" line="321"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\vulkan_rendering.cpp" line="746"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ToggleCursor&amp;#039; is never used." verbose="The function &amp;#039;ToggleCursor&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\vulkan_rendering.cpp" line="868"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;Result&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;Result&amp;#039; is reassigned a value before the old one has been used." sinceDate="18-03-2018">
            <location file="src\engine_math.h" line="1580" info=""/>
            <location file="src\engine_math.h" line="1579" info=""/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\engine_math.h" line="1288"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\engine_math.h" line="1290"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\engine_math.h" line="1293"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\opengl_rendering.h" line="38"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="46"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="60"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="104"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="138"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="156"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="164"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="180"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="195"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="204"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="251"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddAnimationControllerParameter&amp;#039; is never used." verbose="The function &amp;#039;AddAnimationControllerParameter&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="34"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddAnimationLinkCondition&amp;#039; is never used." verbose="The function &amp;#039;AddAnimationLinkCondition&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="133"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddAnimationNode&amp;#039; is never used." verbose="The function &amp;#039;AddAnimationNode&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="56"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddAnimationNodeLink&amp;#039; is never used." verbose="The function &amp;#039;AddAnimationNodeLink&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="96"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddCallbackToAnimationNode&amp;#039; is never used." verbose="The function &amp;#039;AddCallbackToAnimationNode&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="86"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AnimationControllerSetPlaying&amp;#039; is never used." verbose="The function &amp;#039;AnimationControllerSetPlaying&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="29"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ClearAnimationControllers&amp;#039; is never used." verbose="The function &amp;#039;ClearAnimationControllers&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="24"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;CreateAnimationController&amp;#039; is never used." verbose="The function &amp;#039;CreateAnimationController&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="11"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;IsControllerPlaying&amp;#039; is never used." verbose="The function &amp;#039;IsControllerPlaying&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="261"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SetAnimationControllerCurrentNode&amp;#039; is never used." verbose="The function &amp;#039;SetAnimationControllerCurrentNode&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="248"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;SetAnimationControllerParameter&amp;#039; is never used." verbose="The function &amp;#039;SetAnimationControllerParameter&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\animation.cpp" line="42"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\timers.h" line="77"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\keys_glfw.h" line="224"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\win32_platform.cpp" line="69"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\win32_platform.cpp" line="72"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\win32_platform.cpp" line="79"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\win32_platform.cpp" line="113"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;Tok&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;Tok&amp;#039; is reassigned a value before the old one has been used." sinceDate="18-03-2018">
            <location file="src\win32_platform.cpp" line="248" info=""/>
            <location file="src\win32_platform.cpp" line="247" info=""/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;." sinceDate="18-03-2018">
            <location file="src\win32_platform.cpp" line="298"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;." sinceDate="18-03-2018">
            <location file="src\win32_platform.cpp" line="299"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\win32_platform.cpp" line="96"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\win32_platform.cpp" line="109"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\win32_platform.cpp" line="120"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\win32_platform.cpp" line="189"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\osx_platform.cpp" line="136"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\osx_platform.cpp" line="140"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\osx_platform.cpp" line="182"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\osx_platform.cpp" line="165"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\osx_platform.cpp" line="178"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\osx_platform.cpp" line="189"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\linux_platform.cpp" line="138"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\linux_platform.cpp" line="142"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\linux_platform.cpp" line="182"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\linux_platform.cpp" line="165"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\linux_platform.cpp" line="178"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." sinceDate="18-03-2018">
            <location file="src\linux_platform.cpp" line="189"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;Dist&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;Dist&amp;#039; is reassigned a value before the old one has been used." sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="75" info=""/>
            <location file="src\rendering.cpp" line="73" info=""/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: File" verbose="Resource leak: File" sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="523"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: File" verbose="Resource leak: File" sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="636"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddAnimation&amp;#039; is never used." verbose="The function &amp;#039;AddAnimation&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="91"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddParticleSystem&amp;#039; is never used." verbose="The function &amp;#039;AddParticleSystem&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="739"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;EndShader&amp;#039; is never used." verbose="The function &amp;#039;EndShader&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="238"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetTextureSize&amp;#039; is never used." verbose="The function &amp;#039;GetTextureSize&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="152"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;LoadModel&amp;#039; is never used." verbose="The function &amp;#039;LoadModel&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="510"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PerspectiveCameraParams&amp;#039; is never used." verbose="The function &amp;#039;PerspectiveCameraParams&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="29"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PushOutlinedQuad&amp;#039; is never used." verbose="The function &amp;#039;PushOutlinedQuad&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="322"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PushPointLight&amp;#039; is never used." verbose="The function &amp;#039;PushPointLight&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="385"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PushShader&amp;#039; is never used." verbose="The function &amp;#039;PushShader&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="229"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;RemoveParticleSystem&amp;#039; is never used." verbose="The function &amp;#039;RemoveParticleSystem&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="746"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;UpdateBuffer&amp;#039; is never used." verbose="The function &amp;#039;UpdateBuffer&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="473"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;UpdateParticleSystemPosition&amp;#039; is never used." verbose="The function &amp;#039;UpdateParticleSystemPosition&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\rendering.cpp" line="742"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;DebugState&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;DebugState&amp;#039; is assigned a value that is never used." sinceDate="18-03-2018">
            <location file="src\old_files\dan_proto_game.cpp" line="121"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="sscanf() without field width limits can crash with huge input data." verbose="sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" sinceDate="18-03-2018">
            <location file="src\old_files\editor.cpp" line="939"/>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on &amp;#039;Entity&amp;#039; - it&amp;#039;s already a pointer." verbose="Redundant pointer operation on &amp;#039;Entity&amp;#039; - it&amp;#039;s already a pointer." sinceDate="18-03-2018">
            <location file="src\old_files\entity.cpp" line="142"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="sscanf() without field width limits can crash with huge input data." verbose="sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" sinceDate="18-03-2018">
            <location file="src\old_files\entity.cpp" line="250"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="sscanf() without field width limits can crash with huge input data." verbose="sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" sinceDate="18-03-2018">
            <location file="src\old_files\entity.cpp" line="265"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="sscanf() without field width limits can crash with huge input data." verbose="sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" sinceDate="18-03-2018">
            <location file="src\old_files\entity.cpp" line="302"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: CollisionInfo" verbose="Unused variable: CollisionInfo" sinceDate="18-03-2018">
            <location file="src\old_files\entity.cpp" line="1148"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: CollisionInfo" verbose="Unused variable: CollisionInfo" sinceDate="18-03-2018">
            <location file="src\old_files\entity.cpp" line="1157"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DetermineDeltaForDirection&amp;#039; is never used." verbose="The function &amp;#039;DetermineDeltaForDirection&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\old_files\entity.cpp" line="960"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DetermineDirection&amp;#039; is never used." verbose="The function &amp;#039;DetermineDirection&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\old_files\entity.cpp" line="907"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;EnemyWander&amp;#039; is never used." verbose="The function &amp;#039;EnemyWander&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\old_files\entity.cpp" line="491"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PlaceCheckpoint&amp;#039; is never used." verbose="The function &amp;#039;PlaceCheckpoint&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\old_files\entity.cpp" line="714"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PrintEntityInfo&amp;#039; is never used." verbose="The function &amp;#039;PrintEntityInfo&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\old_files\entity.cpp" line="13"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;TileIsOccupied&amp;#039; is never used." verbose="The function &amp;#039;TileIsOccupied&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\old_files\entity.cpp" line="1"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;UpdateAI&amp;#039; is never used." verbose="The function &amp;#039;UpdateAI&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\old_files\entity.cpp" line="1053"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\old_files\game.cpp" line="69"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="18-03-2018">
            <location file="src\old_files\game.cpp" line="70"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PushTilemapRenderCommands&amp;#039; is never used." verbose="The function &amp;#039;PushTilemapRenderCommands&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\old_files\game.cpp" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;File&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;File&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="18-03-2018">
            <location file="src\old_files\game.h" line="244"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;LineBuffer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;LineBuffer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="18-03-2018">
            <location file="src\old_files\level.cpp" line="164"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;TypeName&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;TypeName&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="18-03-2018">
            <location file="src\old_files\level.cpp" line="433"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="sscanf() without field width limits can crash with huge input data." verbose="sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" sinceDate="18-03-2018">
            <location file="src\old_files\level.cpp" line="223"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="sscanf() without field width limits can crash with huge input data." verbose="sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" sinceDate="18-03-2018">
            <location file="src\old_files\level.cpp" line="227"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="sscanf() without field width limits can crash with huge input data." verbose="sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" sinceDate="18-03-2018">
            <location file="src\old_files\level.cpp" line="247"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: Data.Layer" verbose="Uninitialized struct member: Data.Layer" sinceDate="18-03-2018">
            <location file="src\old_files\level.cpp" line="313"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: Level" verbose="Unused variable: Level" sinceDate="18-03-2018">
            <location file="src\old_files\console_commands.h" line="30"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: Level" verbose="Unused variable: Level" sinceDate="18-03-2018">
            <location file="src\old_files\console_commands.h" line="81"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;AddCustomMapping&amp;#039; is never used." verbose="The function &amp;#039;AddCustomMapping&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\keycontroller.cpp" line="191"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetJoystickAxisXDown&amp;#039; is never used." verbose="The function &amp;#039;GetJoystickAxisXDown&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\keycontroller.cpp" line="56"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetJoystickAxisYDown&amp;#039; is never used." verbose="The function &amp;#039;GetJoystickAxisYDown&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\keycontroller.cpp" line="74"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetMouseButtonUp&amp;#039; is never used." verbose="The function &amp;#039;GetMouseButtonUp&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\keycontroller.cpp" line="11"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;IsCustomKeyDown&amp;#039; is never used." verbose="The function &amp;#039;IsCustomKeyDown&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\keycontroller.cpp" line="199"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;IsCustomKeyPressed&amp;#039; is never used." verbose="The function &amp;#039;IsCustomKeyPressed&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\keycontroller.cpp" line="220"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ClosestPointsOnBoundsToPoint&amp;#039; is never used." verbose="The function &amp;#039;ClosestPointsOnBoundsToPoint&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\old_files\collision.cpp" line="294"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetRayIntersectionFraction&amp;#039; is never used." verbose="The function &amp;#039;GetRayIntersectionFraction&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\old_files\collision.cpp" line="347"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;MinkowskiDifference&amp;#039; is never used." verbose="The function &amp;#039;MinkowskiDifference&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\old_files\collision.cpp" line="275"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;FindAnimationScaling&amp;#039; is never used." verbose="The function &amp;#039;FindAnimationScaling&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\skeletal_animation.cpp" line="14"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;FindPath&amp;#039; is never used." verbose="The function &amp;#039;FindPath&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\old_files\ai.cpp" line="267"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;FollowPath&amp;#039; is never used." verbose="The function &amp;#039;FollowPath&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\old_files\ai.cpp" line="284"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;InitAudio_OpenAL&amp;#039; is never used." verbose="The function &amp;#039;InitAudio_OpenAL&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\openal_sound.cpp" line="101"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PlayMusicTrack&amp;#039; is never used." verbose="The function &amp;#039;PlayMusicTrack&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\sound.cpp" line="52"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PlaySoundEffect&amp;#039; is never used." verbose="The function &amp;#039;PlaySoundEffect&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\sound.cpp" line="40"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ReloadLevel&amp;#039; is never used." verbose="The function &amp;#039;ReloadLevel&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\old_files\console.cpp" line="3"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;UnloadOAL11Library&amp;#039; is never used." verbose="The function &amp;#039;UnloadOAL11Library&amp;#039; is never used." sinceDate="18-03-2018">
            <location file="src\win32_load_oal.cpp" line="416"/>
        </error>
    </errors>
</results>
